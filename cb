1.查找最大或最小的几个数，数量较少
heapq.nlargest/nsmallest(number,list,key)
import heapq
nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]
print(heapq.nlargest(3, nums)) # Prints [42, 37, 23]
print(heapq.nsmallest(3, nums)) # Prints [-4, 1, 2]
portfolio = [
    {'name': 'IBM', 'shares': 100, 'price': 91.1},
    {'name': 'AAPL', 'shares': 50, 'price': 543.22},
    {'name': 'FB', 'shares': 200, 'price': 21.09},
    {'name': 'HPQ', 'shares': 35, 'price': 31.75},
    {'name': 'YHOO', 'shares': 45, 'price': 16.35},
    {'name': 'ACME', 'shares': 75, 'price': 115.65}
]
cheap = heapq.nsmallest(3, portfolio, key=lambda s: s['price'])
expensive = heapq.nlargest(3, portfolio, key=lambda s: s['price'])

2查找最大或最小的数
使用min（）或max（）

3查找几个数，个数与列表元素个数相近
sorted(nums)[:n]/sorted(nums)[n:]


defaultdict(default_factory)
阐释：defaultdict（）其实是一个函数，与dict()相似，就是生成词典，但是当使用的key是不存在时，dict（）会报错，但defaultdict（）不会，他会将default_factory
作为一个参数，返回到词典里（通常default_factory都是string，int，set，list）
例如
 d2=defaultdict(list)
>>> print(d2['a'])
[]
 d1=dict()
>>> print(d1['a'])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 'a'

如果 default_factory 是 None ， 它就升起一个 KeyError 并将 key 作为参数。
如果 default_factory 不为 None ， 它就会会被调用，不带参数，为 key 提供一个默认值， 这个值和 key 作为一个对被插入到字典中，并返回。

setdefault（）
dict.setdefault(key, default=None)#key是查找的键值，当键不存在时，返回default

使用defaultdict（）来建立一个可以映射多个值的词典
首先用setdefault（）来理解 
s = [('red', 1), ('blue', 2), ('red', 3), ('blue', 4), ('red', 1), ('blue', 4)]
d={}#创建空词典
>>> for k,v in s:
...     d.setdefault(k,[]).append(v)#在d空词典里，当查找不到key时，生成一个空列表，list.append() 操作添加值到这个新的列表里。当键再次被存取时，就
正常操作， list.append() 添加另一个值到列表中
>>> sorted(d.items())#d.items()是遍历d词典的意思，sorted就是排序啦
[('blue', [2, 4, 4]), ('red', [1, 3, 1])]

使用defaultdict（）效率更高
1，factory是list：
s = [('red', 1), ('blue', 2), ('red', 3), ('blue', 4), ('red', 1), ('blue', 4)]
d=defaultdict（list）
for key,value in s:
    d[key].append(value)#d[]我把它理解为索引，d[key]意思就是d中索引为k的条目
sorted(d.items())
[('blue', [2, 4, 4]), ('red', [1, 3, 1])]


2，factory为int时，发挥计数作用
 n='mississippi'
>>> d=defaultdict(int)
>>> for key in n:
...     d[key]+=1
>>> sorted(d.items())
[('i', 4), ('m', 1), ('p', 2), ('s', 4)]

3，factory为set时，生成集合词典
 s = [('red', 1), ('blue', 2), ('red', 3), ('blue', 4), ('red', 1), ('blue', 4)]
>>> d = defaultdict(set)
>>> for k, v in s:
...     d[k].add(v)#唯二的不同就是append改为add
...
>>> sorted(d.items())
[('blue', {2, 4}), ('red', {1, 3})]



OrderedDict（）
orderdict与dict（）一样也是一种形成词典方的法，只不过dict形成的词典如果不是按相同顺序输入，也会被视为不同的
他除了有keys（），values()，copy(),clear(),items()（字典的 items() 方法返回一个包含 (键，值) 对的元素视图对象。 这个对象同样也支持集合操作，并且
可以被用来查找两个字典有哪些相同的键值对。），pop(),setdefault()等dict通用的方法，还有popitem（），move_to_end()的独有方法
例如说
当使用dict（）的时候，即使最终的输入内容相同，输入时顺序不同，一样被视为相同
 d2={} d2['a']='A' d2['b']='B' d2['c']='C'
 d3={} d3['c']='C' d3['a']='A' d3['b']='B'
 
 print d2 == d3-->  True
 
而当使用OrderedDict()时，即使最终的输入内容相同，输入时顺序不同，则会被视为不同
d4=collections.OrderedDict()
d4['a']='A' d4['b']='B' d4['c']='C'

d5=collections.OrderedDict()
d5['c']='C' d5['a']='A' d5['b']='B'
print（d1==d2）--> False

下列参数last对应的T,F其实是把对应的操作在首末两端都能应用
1.d.popitem(last)#last参数是可写可不写的，不写时默认为True
dic=OrderedDict([('k2', 'v2'), ('k3', 'v3'), ('k1', 'v1')])
>>> print(dic.popitem(last=False))  -->  ('k2', 'v2')#last=False时，奉行fifo（first in first out）
>>> dic --> OrderedDict([('k3', 'v3'), ('k1', 'v1')])

d=OrderedDict([('k2', 'v2'), ('k3', 'v3'), ('k1', 'v1')])
>>> print(d.popitem())  -->  ('k1', 'v1')#last=True时，奉行lifo（last in first out）
>>> d  -->  OrderedDict([('k2', 'v2'), ('k3', 'v3')])


2.d.move_to_end(key,last)#last参数可写可不写，同上
 d=OrderedDict([('a','A'),('b','B'),('c','C')])
>>> d.move_to_end('a')#last没写的时候，把key对应的组合移动到词典末端
>>> d--> OrderedDict([('b', 'B'), ('c', 'C'), ('a', 'A')])

>>> d.move_to_end('c',last=False)#当last=False时，把key组合移动到词典最前端
>>> d--> OrderedDict([('c', 'C'), ('b', 'B'), ('a', 'A')])



collections.Counter()
此方法将hashable对象里的元素出现次数映射到词典上
eg：
words = [
    'look', 'into', 'my', 'eyes', 'look', 'into', 'my', 'eyes',
    'the', 'eyes', 'the', 'eyes', 'the', 'eyes', 'not', 'around', 'the',
    'eyes', "don't", 'look', 'around', 'the', 'eyes', 'look', 'into',
    'my', 'eyes', "you're", 'under'
]

 word_count['not']-->1
 
 most_common(n) 则会返回最常出现的n个元素，及其出现的次数
top_three=word_count.most_common(3)  -->[('eyes', 8), ('the', 5), ('look', 4)]
 
 
 Counter返回的值可以直接用于计算
 如
  a=Counter([
...     'as','sd','df','as','as','sd'])
>>> b=Counter([
...     'as','sd','as'])
>>> a
Counter({'as': 3, 'sd': 2, 'df': 1})
>>> b
Counter({'as': 2, 'sd': 1})
>>>
>>> c=a+b#即使对不齐也没关系
>>> c
Counter({'as': 5, 'sd': 3, 'df': 1})


Operator.itemgetter()
这个相当于指定某的用法
a=['a','b','c','d','e','f']
slay=operator.itemgetter(1)#itemgetter不是为了得到某个值，而是建立函数，只有函数作用在对象上时，才可以得到结果
>>> slay=itemgetter(1)
>>> slay(a)-->'b'


他可以在key中被使用
例如排序中：
rows = [
    {'fname': 'Brian', 'lname': 'Jones', 'uid': 1003},
    {'fname': 'David', 'lname': 'Beazley', 'uid': 1002},
    {'fname': 'John', 'lname': 'Cleese', 'uid': 1001},
    {'fname': 'Big', 'lname': 'Jones', 'uid': 1004}
sort_by_fname=sorted(rows,key=itemgetter('fname')) = rows_by_fname = sorted(rows, key=lambda r: r['fname'])
-->
[{'fname': 'Big', 'uid': 1004, 'lname': 'Jones'},
{'fname': 'Brian', 'uid': 1003, 'lname': 'Jones'},
{'fname': 'David', 'uid': 1002, 'lname': 'Beazley'},
{'fname': 'John', 'uid': 1001, 'lname': 'Cleese'}]

itemgetter也支持多个key：
sort_by_flname=sorted(rows,key=itemgetter('fname','lname')) = rows_by_lfname = sorted(rows, key=lambda r: (r['lname'],r['fname']))
-->
[{'fname': 'David', 'uid': 1002, 'lname': 'Beazley'},
{'fname': 'John', 'uid': 1001, 'lname': 'Cleese'},
{'fname': 'Big', 'uid': 1004, 'lname': 'Jones'},
{'fname': 'Brian', 'uid': 1003, 'lname': 'Jones'}]


attrgetter#用法与作用于词典的itemgetter相似，用于不原生支持比较的·对象
from operator import attrgetter
class User:
...     def __init__(self, user_id):
...         self.user_id = user_id
...     def __repr__(self):
...         return 'User({})'.format(self.user_id)
...
>>> users = [User(23), User(3), User(12)]
>>> users  -->[User(23), User(3), User(12)]
sorted(users,key=attrgetter('user_id')) --> [User(3),User(12),User(23)]

 class Student:
...     def __init__(self,name,grade,level):
...         self.name=name
...         self.grade=grade
...         self.level=level
...     def __repr__(self):
...         return repr((self.name,self.grade,self.level))
...
>>>
>>> students=[
...     Student('lily',98,'a'),
...     Student('jane',66,'c'),
...     Student('bob',82,'b')
... ]
>>> from operator import attrgetter
>>> sorted(students,key=attrgetter('grade'))
[('jane', 66, 'c'), ('bob', 82, 'b'), ('lily', 98, 'a')]
>>> sorted(students,key=attrgetter('name','grade'))
[('bob', 82, 'b'), ('jane', 66, 'c'), ('lily', 98, 'a')]


1.15通过某一字段 记录分组
number1：使用itertools.groupby#优势：内容占容量较小 劣势：只能将相邻的同字段排在一起，因此使用前需要先使用sort()，较麻烦
 rows = [
...     {'address': '5412 N CLARK', 'date': '07/01/2012'},
...     {'address': '5148 N CLARK', 'date': '07/04/2012'},
...     {'address': '5800 E 58TH', 'date': '07/02/2012'},
...     {'address': '2122 N CLARK', 'date': '07/03/2012'},
...     {'address': '5645 N RAVENSWOOD', 'date': '07/02/2012'},
...     {'address': '1060 W ADDISON', 'date': '07/02/2012'},
...     {'address': '4801 N BROADWAY', 'date': '07/01/2012'},
...     {'address': '1039 W GRANVILLE', 'date': '07/04/2012'},
... ]
>>>
>>> from operator import itemgetter
>>> from itertools import groupby
>>> rows.sort(key=itemgetter('date'))
>>> for date,items in groupby(rows,key=itemgetter('date')):
...     print(date)
...     for i in items:
...         print(' ',i)
07/01/2012
  {'address': '5412 N CLARK', 'date': '07/01/2012'}
  {'address': '4801 N BROADWAY', 'date': '07/01/2012'}
07/02/2012
  {'address': '5800 E 58TH', 'date': '07/02/2012'}
  {'address': '5645 N RAVENSWOOD', 'date': '07/02/2012'}
  {'address': '1060 W ADDISON', 'date': '07/02/2012'}
07/03/2012
  {'address': '2122 N CLARK', 'date': '07/03/2012'}
07/04/2012
  {'address': '5148 N CLARK', 'date': '07/04/2012'}
  {'address': '1039 W GRANVILLE', 'date': '07/04/2012'}


number2：使用collections.defaultdict（）
from collections import defaultdict
row_by_date=defaultdict(list)
for row in rows:
...     row_by_date[row['date']].append(row)
...
>>> for r in row_by_date['07/01/2012']:
        print(r)
{'address': '5412 N CLARK', 'date': '07/01/2012'}
{'address': '4801 N BROADWAY', 'date': '07/01/2012'}

过滤序列元素
简单如列表推导式
mylist=[1，2，-9，3，4]
a=[n for n in mylist if n>0]
>>> print(a)
[1, 2, 3, 4]
>>> a=(n for n in mylist if n>0)#将列表的中括号改成小括号，即生成生成器
>>> print(a)
<generator object <genexpr> at 0x00000222B88D97C8>
>>> list(a)
[1, 2, 3, 4]
将过滤数据替换成指定数据，而非抛弃
mylist
[1, -1, 2, 3, 4, -8]
>>> [n if n>0 else -n for n in mylist]
[1, 1, 2, 3, 4, 8]

利用python内置函数filter（）#ps：itertools里的filterfalse则是相反
filter（function，iterable）
 values = ['1', '2', '-3', '-', '4', 'N/A', '5']
>>> def is_int(val):
...     try:
...         x=int(val)
...         return True
...     except ValueError:
...         return False
>>> ivals=list(filter(is_int,values))
>>> print(ivals)  --> ['1', '2', '-3', '4', '5']


compress（iterable，boolean序列）
 addresses = [
...     '5412 N CLARK',
...     '5148 N CLARK',
...     '5800 E 58TH',
...     '2122 N CLARK',
...     '5645 N RAVENSWOOD',
...     '1060 W ADDISON',
...     '4801 N BROADWAY',
...     '1039 W GRANVILLE',
... ]
>>>
>>> counts=[1,2,3,6,7,4,5,8]
>>> more4=[n>4 for n in counts]#创建一个boolean序列
>>> from itertools import compress
>>> counts
[1, 2, 3, 6, 7, 4, 5, 8]
>>> more4
[False, False, False, True, True, False, True, True]
>>> list(compress(addresses,more4))从iterable中摘取出boolean为True的
['2122 N CLARK', '5645 N RAVENSWOOD', '4801 N BROADWAY', '1039 W GRANVILLE']


在词典中提取子集-使用词典推导式
dict={}
格式1：{key:value for key,value in dict.items() if xx}
格式2：{key:dict[key}]for key in dict.keys() if xx}
eg
 prices = {
...     'ACME': 45.23,
...     'AAPL': 612.78,
...     'IBM': 205.55,
...     'HPQ': 37.20,
...     'FB': 10.75
... }
p1={key:value for key,value in prices.items() if value>200}#这里用items要遍历词典
>>> p1
{'AAPL': 612.78, 'IBM': 205.55}
tech_names = { 'AAPL', 'IBM', 'HPQ', 'MSFT' }
p2={key:prices[key] for key in prices.keys() if key in tech_name}#这里用keys（）提取所有key
>>> p2
{'ACME': 45.23, 'HPQ': 37.2}

映射名称到序列元素
使用普通元组，极度依赖位置
def cost2(Sth):
...     total=0.0
...     for sth in Sth:
...         total+=sth[1]*sth[2]
...     return total
...
>>> print(cost2(Sth))
68.0

使用命名元组
fruit=namedtuple('fruit',['name','prices','number'])
>>> def cost(Sth):
...     total=0.0
...     for sth in Sth:
...         s=fruit(*sth)
...         total+=s.prices*s.number
...     return total
...
>>> Sth=[
...     ('apple',12,3),
...     ('orange',6,2),
...     ('lemon',5,4)
... ]
>>> print(cost(Sth))
68.0

缺点：命名元组不可更改
 s=fruit('pineapple',12,4)
>>> s
fruit(name='pineapple', prices=12, number=4)
>>> s.prices=3
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: can't set attribute

这时候可以用_replace（）,他会创建一个新的元组
s=s._replace(prices=3)
>>> s
fruit(name='pineapple', prices=3, number=4)

同时可以用_replace()填充数据
Stock=namedtuple('Stock',['name','shares','price','date','time'])
stock=Stock('',0,0,None,None)
def dict_to_stock(s)：
    return stock._replace(**s)
A={'name':'ad','shares':23,'date':2019}
print(dict_to_stock(A))
Stock(name='ad', shares=23, price=0, date=2019, time=None)
